## SYNTAX FOR LANGUAGE:


stmt2->expr
      | stmt2 / expr
      | stmt2 * expr
      | stmt2 ^ expr
      | stmt2 & expr
      | stmt2 | expr
      | stmt2 @ expr

stmt1->stmt2
      | stmt1 + stmt2
      | stmt1 - stmt2

stmt0->stmt1|stmt2
      | (stmt0) / stmt0
      | (stmt0) * stmt0
      | (stmt0) ^ stmt0
      | (stmt0) & stmt0
      | (stmt0) | stmt0
      | (stmt0) @ stmt0
      |stmt0>stmt0
      |stmt0<stmt0
      |stmt0==stmt0
      |stmt0>=stmt0
      |stmt0<=stmt0

stmts->stmt0;stmts|e
      /*|fun id(params):stmts. not implemented[(lexer,*)(syntax,*)
                                                          (ilt,*]*/
      |if(expr):
          stmts.
      |if(expr):
          stmts.
       else: stmt.

expr->id
    |id(params)

params->type id
    |type id, params
	